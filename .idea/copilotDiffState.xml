<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.UnaspMarketplace&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- Tela Home --&gt;&#10;        &lt;activity android:name=&quot;.HomeActivity&quot; /&gt;&#10;&#10;        &lt;!-- Tela Checkout --&gt;&#10;        &lt;activity android:name=&quot;.CartActivity&quot; /&gt;&#10;&#10;        &lt;!-- Tela de Cadastro de Produtos --&gt;&#10;        &lt;activity android:name=&quot;.PostItemActivity&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.UnaspMarketplace&quot;&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LoginActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;!-- Tela Home --&gt;&#10;        &lt;activity android:name=&quot;.HomeActivity&quot; /&gt;&#10;&#10;        &lt;!-- Tela Checkout --&gt;&#10;        &lt;activity android:name=&quot;.CartActivity&quot; /&gt;&#10;&#10;        &lt;!-- Tela de Cadastro de Produtos --&gt;&#10;        &lt;activity android:name=&quot;.PostItemActivity&quot; /&gt;&#10;&#10;        &lt;!-- Tela de Detalhes do Produto --&gt;&#10;        &lt;activity android:name=&quot;.ProductDetailActivity&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/CartActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/CartActivity.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.widget.ImageView&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.unasp.unaspmarketplace.utils.CartManager&#10;import com.unasp.unaspmarketplace.utils.CartBadgeManager&#10;&#10;class CartActivity : AppCompatActivity(), CartManager.CartUpdateListener {&#10;&#10;    private lateinit var recyclerCart: RecyclerView&#10;    private lateinit var txtTotal: TextView&#10;    private lateinit var btnCheckout: Button&#10;    private lateinit var cartAdapter: CartAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.cart_activity)&#10;&#10;        initViews()&#10;        setupRecyclerView()&#10;        setupButtons()&#10;        setupBottomNavigation()&#10;        loadCartItems()&#10;        &#10;        // Registrar listener do carrinho&#10;        CartManager.addListener(this)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        CartManager.removeListener(this)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Garantir que a UI esteja sincronizada quando voltar para a tela&#10;        updateUI()&#10;        CartBadgeManager.updateBadge(CartManager.getTotalItemCount())&#10;    }&#10;&#10;    override fun onCartUpdated(itemCount: Int, totalPrice: Double) {&#10;        updateUI()&#10;        CartBadgeManager.updateBadge(itemCount)&#10;    }&#10;&#10;    private fun initViews() {&#10;        txtTotal = findViewById(R.id.txtTotal)&#10;        btnCheckout = findViewById(R.id.btnCheckout)&#10;        recyclerCart = findViewById(R.id.recyclerCart)&#10;&#10;        val btnBack = findViewById&lt;ImageView&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener { finish() }&#10;&#10;        val btnClearCart = findViewById&lt;ImageView&gt;(R.id.btnClearCart)&#10;        btnClearCart.setOnClickListener {&#10;            CartManager.clearCart()&#10;            Toast.makeText(this, &quot;Carrinho limpo!&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        cartAdapter = CartAdapter()&#10;        recyclerCart.layoutManager = LinearLayoutManager(this)&#10;        recyclerCart.adapter = cartAdapter&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        btnCheckout.setOnClickListener {&#10;            val cartItems = CartManager.getCartItems()&#10;            if (cartItems.isEmpty()) {&#10;                Toast.makeText(this, &quot;Carrinho vazio!&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                val total = CartManager.getTotalPrice()&#10;                Toast.makeText(this, &quot;Compra finalizada!\nTotal: R$ %.2f&quot;.format(total), Toast.LENGTH_LONG).show()&#10;                CartManager.clearCart()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCartItems() {&#10;        updateUI()&#10;    }&#10;&#10;    private fun updateUI() {&#10;        val cartItems = CartManager.getCartItems()&#10;        cartAdapter.updateItems(cartItems)&#10;        &#10;        val total = CartManager.getTotalPrice()&#10;        txtTotal.text = &quot;Total: R$ %.2f&quot;.format(total)&#10;        &#10;        btnCheckout.isEnabled = cartItems.isNotEmpty()&#10;        btnCheckout.alpha = if (cartItems.isNotEmpty()) 1.0f else 0.5f&#10;    }&#10;&#10;    private fun setupBottomNavigation() {&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottom_navigation_cart)&#10;        bottomNavigation.selectedItemId = R.id.nav_cart&#10;        &#10;        CartBadgeManager.setupCartBadge(bottomNavigation)&#10;        CartBadgeManager.updateBadge(CartManager.getTotalItemCount())&#10;        &#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    intent.putExtra(&quot;openMenu&quot;, true)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    Toast.makeText(this, &quot;Você já está no Carrinho&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    inner class CartAdapter : RecyclerView.Adapter&lt;CartAdapter.CartViewHolder&gt;() {&#10;        private var items = listOf&lt;com.unasp.unaspmarketplace.utils.CartItem&gt;()&#10;&#10;        fun updateItems(newItems: List&lt;com.unasp.unaspmarketplace.utils.CartItem&gt;) {&#10;            items = newItems&#10;            notifyDataSetChanged()&#10;        }&#10;&#10;        inner class CartViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;            val txtName: TextView = itemView.findViewById(R.id.txtName)&#10;            val txtPrice: TextView = itemView.findViewById(R.id.txtPrice)&#10;            val txtQuantity: TextView = itemView.findViewById(R.id.txtQuantity)&#10;            val btnIncrease: Button = itemView.findViewById(R.id.btnIncrease)&#10;            val btnDecrease: Button = itemView.findViewById(R.id.btnDecrease)&#10;            val btnRemove: Button = itemView.findViewById(R.id.btnRemove)&#10;            val imgProduct: ImageView = itemView.findViewById(R.id.imgProduct)&#10;        }&#10;&#10;        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CartViewHolder {&#10;            val view = LayoutInflater.from(parent.context)&#10;                .inflate(R.layout.cart_item, parent, false)&#10;            return CartViewHolder(view)&#10;        }&#10;&#10;        override fun onBindViewHolder(holder: CartViewHolder, position: Int) {&#10;            val item = items[position]&#10;            val product = item.product&#10;            &#10;            holder.txtName.text = product.name&#10;            holder.txtPrice.text = &quot;R$ %.2f&quot;.format(item.totalPrice)&#10;            holder.txtQuantity.text = item.quantity.toString()&#10;            holder.imgProduct.setImageResource(R.drawable.ic_launcher_background)&#10;&#10;            // Botão incrementar (+)&#10;            holder.btnIncrease.isEnabled = item.quantity &lt; product.stock&#10;            holder.btnIncrease.setOnClickListener {&#10;                if (CartManager.updateQuantity(product.id, item.quantity + 1)) {&#10;                    // Atualização bem-sucedida&#10;                } else {&#10;                    Toast.makeText(holder.itemView.context, &quot;Estoque insuficiente!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            // Botão decrementar (-)&#10;            holder.btnDecrease.isEnabled = item.quantity &gt; 1&#10;            holder.btnDecrease.setOnClickListener {&#10;                if (item.quantity &gt; 1) {&#10;                    CartManager.updateQuantity(product.id, item.quantity - 1)&#10;                }&#10;            }&#10;&#10;            // Botão remover&#10;            holder.btnRemove.setOnClickListener {&#10;                CartManager.removeFromCart(product.id)&#10;                Toast.makeText(holder.itemView.context, &quot;Item removido do carrinho&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        override fun getItemCount(): Int = items.size&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/CartActivityNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/CartActivityNew.kt" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.widget.ImageView&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.unasp.unaspmarketplace.utils.CartManager&#10;import com.unasp.unaspmarketplace.utils.CartBadgeManager&#10;&#10;class CartActivity : AppCompatActivity(), CartManager.CartUpdateListener {&#10;&#10;    private lateinit var recyclerCart: RecyclerView&#10;    private lateinit var txtTotal: TextView&#10;    private lateinit var btnCheckout: Button&#10;    private lateinit var cartAdapter: CartAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.cart_activity)&#10;&#10;        initViews()&#10;        setupRecyclerView()&#10;        setupButtons()&#10;        setupBottomNavigation()&#10;        loadCartItems()&#10;        &#10;        // Registrar listener do carrinho&#10;        CartManager.addListener(this)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        CartManager.removeListener(this)&#10;    }&#10;&#10;    override fun onCartUpdated(itemCount: Int, totalPrice: Double) {&#10;        updateUI()&#10;        CartBadgeManager.updateBadge(itemCount)&#10;    }&#10;&#10;    private fun initViews() {&#10;        txtTotal = findViewById(R.id.txtTotal)&#10;        btnCheckout = findViewById(R.id.btnCheckout)&#10;        recyclerCart = findViewById(R.id.recyclerCart)&#10;&#10;        val btnBack = findViewById&lt;ImageView&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener { finish() }&#10;&#10;        val btnClearCart = findViewById&lt;ImageView&gt;(R.id.btnClearCart)&#10;        btnClearCart.setOnClickListener {&#10;            CartManager.clearCart()&#10;            Toast.makeText(this, &quot;Carrinho limpo!&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        cartAdapter = CartAdapter()&#10;        recyclerCart.layoutManager = LinearLayoutManager(this)&#10;        recyclerCart.adapter = cartAdapter&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        btnCheckout.setOnClickListener {&#10;            val cartItems = CartManager.getCartItems()&#10;            if (cartItems.isEmpty()) {&#10;                Toast.makeText(this, &quot;Carrinho vazio!&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                val total = CartManager.getTotalPrice()&#10;                Toast.makeText(this, &quot;Compra finalizada!\nTotal: R$ %.2f&quot;.format(total), Toast.LENGTH_LONG).show()&#10;                CartManager.clearCart()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCartItems() {&#10;        updateUI()&#10;    }&#10;&#10;    private fun updateUI() {&#10;        val cartItems = CartManager.getCartItems()&#10;        cartAdapter.updateItems(cartItems)&#10;        &#10;        val total = CartManager.getTotalPrice()&#10;        txtTotal.text = &quot;Total: R$ %.2f&quot;.format(total)&#10;        &#10;        btnCheckout.isEnabled = cartItems.isNotEmpty()&#10;        btnCheckout.alpha = if (cartItems.isNotEmpty()) 1.0f else 0.5f&#10;&#10;        // Mostrar mensagem se carrinho vazio&#10;        if (cartItems.isEmpty()) {&#10;            Toast.makeText(this, &quot;Carrinho vazio&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupBottomNavigation() {&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottom_navigation_cart)&#10;        bottomNavigation.selectedItemId = R.id.nav_cart&#10;        &#10;        CartBadgeManager.setupCartBadge(bottomNavigation)&#10;        CartBadgeManager.updateBadge(CartManager.getTotalItemCount())&#10;        &#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    intent.putExtra(&quot;openMenu&quot;, true)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    Toast.makeText(this, &quot;Você já está no Carrinho&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    inner class CartAdapter : RecyclerView.Adapter&lt;CartAdapter.CartViewHolder&gt;() {&#10;        private var items = listOf&lt;com.unasp.unaspmarketplace.utils.CartItem&gt;()&#10;&#10;        fun updateItems(newItems: List&lt;com.unasp.unaspmarketplace.utils.CartItem&gt;) {&#10;            items = newItems&#10;            notifyDataSetChanged()&#10;        }&#10;&#10;        inner class CartViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;            val txtName: TextView = itemView.findViewById(R.id.txtName)&#10;            val txtPrice: TextView = itemView.findViewById(R.id.txtPrice)&#10;            val txtQuantity: TextView = itemView.findViewById(R.id.txtQuantity)&#10;            val btnIncrease: Button = itemView.findViewById(R.id.btnIncrease)&#10;            val btnDecrease: Button = itemView.findViewById(R.id.btnDecrease)&#10;            val btnRemove: Button = itemView.findViewById(R.id.btnRemove)&#10;            val imgProduct: ImageView = itemView.findViewById(R.id.imgProduct)&#10;        }&#10;&#10;        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CartViewHolder {&#10;            val view = LayoutInflater.from(parent.context)&#10;                .inflate(R.layout.cart_item, parent, false)&#10;            return CartViewHolder(view)&#10;        }&#10;&#10;        override fun onBindViewHolder(holder: CartViewHolder, position: Int) {&#10;            val item = items[position]&#10;            val product = item.product&#10;            &#10;            holder.txtName.text = product.name&#10;            holder.txtPrice.text = &quot;R$ %.2f&quot;.format(item.totalPrice)&#10;            holder.txtQuantity.text = item.quantity.toString()&#10;            holder.imgProduct.setImageResource(R.drawable.ic_launcher_background)&#10;&#10;            // Botão incrementar (+)&#10;            holder.btnIncrease.isEnabled = item.quantity &lt; product.stock&#10;            holder.btnIncrease.setOnClickListener {&#10;                if (CartManager.updateQuantity(product.id, item.quantity + 1)) {&#10;                    // Atualização bem-sucedida&#10;                } else {&#10;                    Toast.makeText(itemView.context, &quot;Estoque insuficiente!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            // Botão decrementar (-)&#10;            holder.btnDecrease.isEnabled = item.quantity &gt; 1&#10;            holder.btnDecrease.setOnClickListener {&#10;                if (item.quantity &gt; 1) {&#10;                    CartManager.updateQuantity(product.id, item.quantity - 1)&#10;                }&#10;            }&#10;&#10;            // Botão remover&#10;            holder.btnRemove.setOnClickListener {&#10;                CartManager.removeFromCart(product.id)&#10;                Toast.makeText(itemView.context, &quot;Item removido do carrinho&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        override fun getItemCount(): Int = items.size&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/HomeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/HomeActivity.kt" />
              <option name="originalContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.unasp.unaspmarketplace.modelos.Category&#10;import com.unasp.unaspmarketplace.modelos.CategoryAdapter&#10;import com.unasp.unaspmarketplace.modelos.ProductAdapter&#10;import android.content.Intent&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import android.widget.Toast&#10;import androidx.lifecycle.lifecycleScope&#10;import com.google.android.material.navigation.NavigationView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import androidx.core.view.GravityCompat&#10;import com.unasp.unaspmarketplace.models.Product&#10;import com.unasp.unaspmarketplace.repository.ProductRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeActivity : AppCompatActivity() {&#10;    private lateinit var productRepository: ProductRepository&#10;    private lateinit var productAdapter: ProductAdapter&#10;    private lateinit var recyclerProducts: RecyclerView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.home_activity)&#10;&#10;        // Inicializar repositório&#10;        productRepository = ProductRepository()&#10;&#10;        setupCategories()&#10;        setupProducts()&#10;        setupNavigation()&#10;&#10;        // Carregar produtos&#10;        loadProducts()&#10;    }&#10;&#10;    private fun setupCategories() {&#10;        val categorys = listOf(&#10;            Category(&quot;Roupas&quot;, R.drawable.tshirt_logo),&#10;            Category(&quot;Eletrônicos&quot;, R.drawable.computer_logo),&#10;            Category(&quot;Alimentos&quot;, R.drawable.apple_logo),&#10;            Category(&quot;Livros&quot;, R.drawable.book_logo)&#10;        )&#10;&#10;        val recyclerCategory = findViewById&lt;RecyclerView&gt;(R.id.recyclerCategorys)&#10;        recyclerCategory.layoutManager =&#10;            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        recyclerCategory.adapter = CategoryAdapter(categorys)&#10;    }&#10;&#10;    private fun setupProducts() {&#10;        recyclerProducts = findViewById(R.id.recyclerProducts)&#10;        recyclerProducts.layoutManager = GridLayoutManager(this, 2)&#10;&#10;        // Inicializar adapter com lista vazia&#10;        productAdapter = ProductAdapter(mutableListOf())&#10;        recyclerProducts.adapter = productAdapter&#10;    }&#10;&#10;    private fun setupNavigation() {&#10;        // Configuração do menu lateral&#10;        val drawerLayout = findViewById&lt;DrawerLayout&gt;(R.id.drawerLayout)&#10;        val navigationView = findViewById&lt;NavigationView&gt;(R.id.navigationView)&#10;&#10;        // Verificar se deve abrir o menu automaticamente&#10;        if (intent.getBooleanExtra(&quot;openMenu&quot;, false)) {&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // Configuração da hotbar inferior&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottomNavigation)&#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    // Abre o menu lateral&#10;                    drawerLayout.openDrawer(GravityCompat.START)&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    // Já estamos na home, não precisa fazer nada&#10;                    Toast.makeText(this, &quot;Você já está na Home&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    // Implementar navegação para notificações&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    // Navegar para o carrinho&#10;                    val intent = Intent(this, CartActivity::class.java)&#10;                    startActivity(intent)&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // Configuração do menu lateral&#10;        navigationView.setNavigationItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_post_item -&gt; {&#10;                    val intent = Intent(this, PostItemActivity::class.java)&#10;                    startActivity(intent)&#10;                }&#10;                R.id.nav_profile -&gt; {&#10;                    Toast.makeText(this, &quot;Perfil&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.closeDrawers() // fecha o menu depois do clique&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun loadProducts() {&#10;        lifecycleScope.launch {&#10;            try {&#10;                val result = productRepository.getActiveProducts()&#10;&#10;                if (result.isSuccess) {&#10;                    val products = result.getOrNull() ?: emptyList()&#10;                    runOnUiThread {&#10;                        productAdapter.updateProducts(products)&#10;&#10;                        if (products.isEmpty()) {&#10;                            Toast.makeText(this@HomeActivity, &quot;Nenhum produto encontrado. Que tal publicar o primeiro?&quot;, Toast.LENGTH_LONG).show()&#10;                        } else {&#10;                            Toast.makeText(this@HomeActivity, &quot;Carregados ${products.size} produtos!&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                } else {&#10;                    val error = result.exceptionOrNull()&#10;                    val errorMessage = error?.message ?: &quot;Erro desconhecido&quot;&#10;                    runOnUiThread {&#10;                        Toast.makeText(this@HomeActivity, &quot;Erro Firebase: $errorMessage&quot;, Toast.LENGTH_LONG).show()&#10;&#10;                        // Carregar produtos de exemplo como fallback&#10;                        loadSampleProducts()&#10;                        Toast.makeText(this@HomeActivity, &quot;Carregando produtos de exemplo...&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                runOnUiThread {&#10;                    Toast.makeText(this@HomeActivity, &quot;Erro de conexão: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                    loadSampleProducts()&#10;                    Toast.makeText(this@HomeActivity, &quot;Carregando produtos de exemplo...&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadSampleProducts() {&#10;        // Produtos de exemplo caso não consiga carregar do Firebase&#10;        val sampleProducts = listOf(&#10;            Product(&#10;                name = &quot;Notebook Dell&quot;,&#10;                description = &quot;Notebook Dell Inspiron&quot;,&#10;                price = 3500.0,&#10;                category = &quot;Eletrônicos&quot;,&#10;                stock = 5,&#10;                active = true&#10;            ),&#10;            Product(&#10;                name = &quot;Camiseta Azul&quot;,&#10;                description = &quot;Camiseta Nike azul&quot;,&#10;                price = 79.9,&#10;                category = &quot;Roupas&quot;,&#10;                stock = 10,&#10;                active = true&#10;            ),&#10;            Product(&#10;                name = &quot;Livro Kotlin&quot;,&#10;                description = &quot;Livro sobre programação Kotlin&quot;,&#10;                price = 120.0,&#10;                category = &quot;Livros&quot;,&#10;                stock = 3,&#10;                active = true&#10;            )&#10;        )&#10;&#10;        productAdapter.updateProducts(sampleProducts)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Recarregar produtos quando voltar para a tela&#10;        loadProducts()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.unasp.unaspmarketplace.modelos.Category&#10;import com.unasp.unaspmarketplace.modelos.CategoryAdapter&#10;import com.unasp.unaspmarketplace.modelos.ProductAdapter&#10;import android.content.Intent&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import android.widget.Toast&#10;import androidx.lifecycle.lifecycleScope&#10;import com.google.android.material.navigation.NavigationView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import androidx.core.view.GravityCompat&#10;import com.unasp.unaspmarketplace.models.Product&#10;import com.unasp.unaspmarketplace.repository.ProductRepository&#10;import com.unasp.unaspmarketplace.utils.CartManager&#10;import com.unasp.unaspmarketplace.utils.CartBadgeManager&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeActivity : AppCompatActivity(), CartManager.CartUpdateListener {&#10;    private lateinit var productRepository: ProductRepository&#10;    private lateinit var productAdapter: ProductAdapter&#10;    private lateinit var recyclerProducts: RecyclerView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.home_activity)&#10;&#10;        // Inicializar repositório&#10;        productRepository = ProductRepository()&#10;&#10;        setupCategories()&#10;        setupProducts()&#10;        setupNavigation()&#10;&#10;        // Carregar produtos&#10;        loadProducts()&#10;        &#10;        // Registrar listener do carrinho&#10;        CartManager.addListener(this)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        CartManager.removeListener(this)&#10;    }&#10;&#10;    override fun onCartUpdated(itemCount: Int, totalPrice: Double) {&#10;        CartBadgeManager.updateBadge(itemCount)&#10;    }&#10;&#10;    private fun setupCategories() {&#10;        val categorys = listOf(&#10;            Category(&quot;Roupas&quot;, R.drawable.tshirt_logo),&#10;            Category(&quot;Eletrônicos&quot;, R.drawable.computer_logo),&#10;            Category(&quot;Alimentos&quot;, R.drawable.apple_logo),&#10;            Category(&quot;Livros&quot;, R.drawable.book_logo)&#10;        )&#10;&#10;        val recyclerCategory = findViewById&lt;RecyclerView&gt;(R.id.recyclerCategorys)&#10;        recyclerCategory.layoutManager =&#10;            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        recyclerCategory.adapter = CategoryAdapter(categorys)&#10;    }&#10;&#10;    private fun setupProducts() {&#10;        recyclerProducts = findViewById(R.id.recyclerProducts)&#10;        recyclerProducts.layoutManager = GridLayoutManager(this, 2)&#10;&#10;        // Inicializar adapter com lista vazia&#10;        productAdapter = ProductAdapter(mutableListOf())&#10;        recyclerProducts.adapter = productAdapter&#10;    }&#10;&#10;    private fun setupNavigation() {&#10;        // Configuração do menu lateral&#10;        val drawerLayout = findViewById&lt;DrawerLayout&gt;(R.id.drawerLayout)&#10;        val navigationView = findViewById&lt;NavigationView&gt;(R.id.navigationView)&#10;&#10;        // Verificar se deve abrir o menu automaticamente&#10;        if (intent.getBooleanExtra(&quot;openMenu&quot;, false)) {&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // Configuração da hotbar inferior&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottomNavigation)&#10;        &#10;        // Configurar badge do carrinho&#10;        CartBadgeManager.setupCartBadge(bottomNavigation)&#10;        CartBadgeManager.updateBadge(CartManager.getTotalItemCount())&#10;        &#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    // Abre o menu lateral&#10;                    drawerLayout.openDrawer(GravityCompat.START)&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    // Já estamos na home, não precisa fazer nada&#10;                    Toast.makeText(this, &quot;Você já está na Home&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    // Implementar navegação para notificações&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    // Navegar para o carrinho&#10;                    val intent = Intent(this, CartActivity::class.java)&#10;                    startActivity(intent)&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // Configuração do menu lateral&#10;        navigationView.setNavigationItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_post_item -&gt; {&#10;                    val intent = Intent(this, PostItemActivity::class.java)&#10;                    startActivity(intent)&#10;                }&#10;                R.id.nav_profile -&gt; {&#10;                    Toast.makeText(this, &quot;Perfil&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.closeDrawers() // fecha o menu depois do clique&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun loadProducts() {&#10;        lifecycleScope.launch {&#10;            try {&#10;                val result = productRepository.getActiveProducts()&#10;&#10;                if (result.isSuccess) {&#10;                    val products = result.getOrNull() ?: emptyList()&#10;                    runOnUiThread {&#10;                        productAdapter.updateProducts(products)&#10;&#10;                        if (products.isEmpty()) {&#10;                            Toast.makeText(this@HomeActivity, &quot;Nenhum produto encontrado. Que tal publicar o primeiro?&quot;, Toast.LENGTH_LONG).show()&#10;                        } else {&#10;                            Toast.makeText(this@HomeActivity, &quot;Carregados ${products.size} produtos!&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                } else {&#10;                    val error = result.exceptionOrNull()&#10;                    val errorMessage = error?.message ?: &quot;Erro desconhecido&quot;&#10;                    runOnUiThread {&#10;                        Toast.makeText(this@HomeActivity, &quot;Erro Firebase: $errorMessage&quot;, Toast.LENGTH_LONG).show()&#10;&#10;                        // Carregar produtos de exemplo como fallback&#10;                        loadSampleProducts()&#10;                        Toast.makeText(this@HomeActivity, &quot;Carregando produtos de exemplo...&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                runOnUiThread {&#10;                    Toast.makeText(this@HomeActivity, &quot;Erro de conexão: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                    loadSampleProducts()&#10;                    Toast.makeText(this@HomeActivity, &quot;Carregando produtos de exemplo...&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadSampleProducts() {&#10;        // Produtos de exemplo caso não consiga carregar do Firebase&#10;        val sampleProducts = listOf(&#10;            Product(&#10;                name = &quot;Notebook Dell&quot;,&#10;                description = &quot;Notebook Dell Inspiron&quot;,&#10;                price = 3500.0,&#10;                category = &quot;Eletrônicos&quot;,&#10;                stock = 5,&#10;                active = true&#10;            ),&#10;            Product(&#10;                name = &quot;Camiseta Azul&quot;,&#10;                description = &quot;Camiseta Nike azul&quot;,&#10;                price = 79.9,&#10;                category = &quot;Roupas&quot;,&#10;                stock = 10,&#10;                active = true&#10;            ),&#10;            Product(&#10;                name = &quot;Livro Kotlin&quot;,&#10;                description = &quot;Livro sobre programação Kotlin&quot;,&#10;                price = 120.0,&#10;                category = &quot;Livros&quot;,&#10;                stock = 3,&#10;                active = true&#10;            )&#10;        )&#10;&#10;        productAdapter.updateProducts(sampleProducts)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Recarregar produtos quando voltar para a tela&#10;        loadProducts()&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/HomeActivityNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/HomeActivityNew.kt" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.unasp.unaspmarketplace.modelos.Category&#10;import com.unasp.unaspmarketplace.modelos.CategoryAdapter&#10;import com.unasp.unaspmarketplace.modelos.ProductAdapter&#10;import android.content.Intent&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import android.widget.Toast&#10;import androidx.lifecycle.lifecycleScope&#10;import com.google.android.material.navigation.NavigationView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import androidx.core.view.GravityCompat&#10;import com.unasp.unaspmarketplace.models.Product&#10;import com.unasp.unaspmarketplace.repository.ProductRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeActivity : AppCompatActivity() {&#10;    private lateinit var productRepository: ProductRepository&#10;    private lateinit var productAdapter: ProductAdapter&#10;    private lateinit var recyclerProducts: RecyclerView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.home_activity)&#10;&#10;        // Inicializar repositório&#10;        productRepository = ProductRepository()&#10;&#10;        setupCategories()&#10;        setupProducts()&#10;        setupNavigation()&#10;&#10;        // Carregar produtos&#10;        loadProducts()&#10;    }&#10;&#10;    private fun setupCategories() {&#10;        val categorys = listOf(&#10;            Category(&quot;Roupas&quot;, R.drawable.tshirt_logo),&#10;            Category(&quot;Eletrônicos&quot;, R.drawable.computer_logo),&#10;            Category(&quot;Alimentos&quot;, R.drawable.apple_logo),&#10;            Category(&quot;Livros&quot;, R.drawable.book_logo)&#10;        )&#10;&#10;        val recyclerCategory = findViewById&lt;RecyclerView&gt;(R.id.recyclerCategorys)&#10;        recyclerCategory.layoutManager =&#10;            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        recyclerCategory.adapter = CategoryAdapter(categorys)&#10;    }&#10;&#10;    private fun setupProducts() {&#10;        recyclerProducts = findViewById(R.id.recyclerProducts)&#10;        recyclerProducts.layoutManager = GridLayoutManager(this, 2)&#10;        &#10;        // Inicializar adapter com lista vazia&#10;        productAdapter = ProductAdapter(mutableListOf())&#10;        recyclerProducts.adapter = productAdapter&#10;    }&#10;&#10;    private fun setupNavigation() {&#10;        // Configuração do menu lateral&#10;        val drawerLayout = findViewById&lt;DrawerLayout&gt;(R.id.drawerLayout)&#10;        val navigationView = findViewById&lt;NavigationView&gt;(R.id.navigationView)&#10;&#10;        // Verificar se deve abrir o menu automaticamente&#10;        if (intent.getBooleanExtra(&quot;openMenu&quot;, false)) {&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // Configuração da hotbar inferior&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottomNavigation)&#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    // Abre o menu lateral&#10;                    drawerLayout.openDrawer(GravityCompat.START)&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    // Já estamos na home, não precisa fazer nada&#10;                    Toast.makeText(this, &quot;Você já está na Home&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    // Implementar navegação para notificações&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    // Navegar para o carrinho&#10;                    val intent = Intent(this, CartActivity::class.java)&#10;                    startActivity(intent)&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // Configuração do menu lateral&#10;        navigationView.setNavigationItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_post_item -&gt; {&#10;                    val intent = Intent(this, PostItemActivity::class.java)&#10;                    startActivity(intent)&#10;                }&#10;                R.id.nav_profile -&gt; {&#10;                    Toast.makeText(this, &quot;Perfil&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.closeDrawers() // fecha o menu depois do clique&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun loadProducts() {&#10;        lifecycleScope.launch {&#10;            try {&#10;                val result = productRepository.getActiveProducts()&#10;                &#10;                if (result.isSuccess) {&#10;                    val products = result.getOrNull() ?: emptyList()&#10;                    runOnUiThread {&#10;                        productAdapter.updateProducts(products)&#10;                        &#10;                        if (products.isEmpty()) {&#10;                            Toast.makeText(this@HomeActivity, &quot;Nenhum produto encontrado. Que tal publicar o primeiro?&quot;, Toast.LENGTH_LONG).show()&#10;                        }&#10;                    }&#10;                } else {&#10;                    val error = result.exceptionOrNull()?.message ?: &quot;Erro desconhecido&quot;&#10;                    runOnUiThread {&#10;                        Toast.makeText(this@HomeActivity, &quot;Erro ao carregar produtos: $error&quot;, Toast.LENGTH_LONG).show()&#10;                        &#10;                        // Carregar produtos de exemplo se houver erro&#10;                        loadSampleProducts()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                runOnUiThread {&#10;                    Toast.makeText(this@HomeActivity, &quot;Erro de conexão: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                    loadSampleProducts()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadSampleProducts() {&#10;        // Produtos de exemplo caso não consiga carregar do Firebase&#10;        val sampleProducts = listOf(&#10;            Product(&#10;                name = &quot;Notebook Dell&quot;,&#10;                description = &quot;Notebook Dell Inspiron&quot;,&#10;                price = 3500.0,&#10;                category = &quot;Eletrônicos&quot;,&#10;                stock = 5,&#10;                isActive = true&#10;            ),&#10;            Product(&#10;                name = &quot;Camiseta Azul&quot;,&#10;                description = &quot;Camiseta Nike azul&quot;,&#10;                price = 79.9,&#10;                category = &quot;Roupas&quot;,&#10;                stock = 10,&#10;                isActive = true&#10;            ),&#10;            Product(&#10;                name = &quot;Livro Kotlin&quot;,&#10;                description = &quot;Livro sobre programação Kotlin&quot;,&#10;                price = 120.0,&#10;                category = &quot;Livros&quot;,&#10;                stock = 3,&#10;                isActive = true&#10;            )&#10;        )&#10;        &#10;        productAdapter.updateProducts(sampleProducts)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Recarregar produtos quando voltar para a tela&#10;        loadProducts()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/ProductDetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/ProductDetailActivity.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.google.android.material.button.MaterialButton&#10;import com.unasp.unaspmarketplace.models.Product&#10;import com.unasp.unaspmarketplace.utils.CartManager&#10;import com.unasp.unaspmarketplace.utils.CartBadgeManager&#10;&#10;class ProductDetailActivity : AppCompatActivity(), CartManager.CartUpdateListener {&#10;    private lateinit var product: Product&#10;    private var currentQuantity = 1&#10;&#10;    private lateinit var txtProductName: TextView&#10;    private lateinit var txtProductCategory: TextView&#10;    private lateinit var txtProductPrice: TextView&#10;    private lateinit var txtProductStock: TextView&#10;    private lateinit var txtProductDescription: TextView&#10;    private lateinit var txtSellerName: TextView&#10;    private lateinit var imgProductDetail: ImageView&#10;    private lateinit var txtQuantity: TextView&#10;    private lateinit var btnDecrease: MaterialButton&#10;    private lateinit var btnIncrease: MaterialButton&#10;    private lateinit var btnAddToCart: MaterialButton&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_product_detail)&#10;&#10;        initViews()&#10;        getProductFromIntent()&#10;        setupQuantityControls()&#10;        setupButtons()&#10;        setupBottomNavigation()&#10;        displayProductInfo()&#10;&#10;        // Registrar listener do carrinho&#10;        CartManager.addListener(this)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        // Remover listener para evitar memory leaks&#10;        CartManager.removeListener(this)&#10;    }&#10;&#10;    override fun onCartUpdated(itemCount: Int, totalPrice: Double) {&#10;        // Atualizar badge do carrinho&#10;        CartBadgeManager.updateBadge(itemCount)&#10;    }&#10;&#10;    private fun initViews() {&#10;        txtProductName = findViewById(R.id.txtProductName)&#10;        txtProductCategory = findViewById(R.id.txtProductCategory)&#10;        txtProductPrice = findViewById(R.id.txtProductPrice)&#10;        txtProductStock = findViewById(R.id.txtProductStock)&#10;        txtProductDescription = findViewById(R.id.txtProductDescription)&#10;        txtSellerName = findViewById(R.id.txtSellerName)&#10;        imgProductDetail = findViewById(R.id.imgProductDetail)&#10;        txtQuantity = findViewById(R.id.txtQuantity)&#10;        btnDecrease = findViewById(R.id.btnDecrease)&#10;        btnIncrease = findViewById(R.id.btnIncrease)&#10;        btnAddToCart = findViewById(R.id.btnAddToCart)&#10;&#10;        val btnBack = findViewById&lt;ImageView&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener { finish() }&#10;    }&#10;&#10;    private fun getProductFromIntent() {&#10;        // Receber dados do produto via Intent&#10;        product = Product(&#10;            id = intent.getStringExtra(&quot;productId&quot;) ?: &quot;&quot;,&#10;            name = intent.getStringExtra(&quot;productName&quot;) ?: &quot;&quot;,&#10;            description = intent.getStringExtra(&quot;productDescription&quot;) ?: &quot;&quot;,&#10;            price = intent.getDoubleExtra(&quot;productPrice&quot;, 0.0),&#10;            stock = intent.getIntExtra(&quot;productStock&quot;, 0),&#10;            category = intent.getStringExtra(&quot;productCategory&quot;) ?: &quot;&quot;,&#10;            sellerId = intent.getStringExtra(&quot;productSellerId&quot;) ?: &quot;&quot;,&#10;            sellerName = intent.getStringExtra(&quot;productSellerName&quot;) ?: &quot;&quot;,&#10;            active = intent.getBooleanExtra(&quot;productActive&quot;, true)&#10;        )&#10;    }&#10;&#10;    private fun displayProductInfo() {&#10;        txtProductName.text = product.name&#10;        txtProductCategory.text = product.category&#10;        txtProductPrice.text = &quot;R$ %.2f&quot;.format(product.price)&#10;        txtProductStock.text = &quot;${product.stock} unidades&quot;&#10;        txtProductDescription.text = product.description&#10;        txtSellerName.text = product.sellerName.ifEmpty { &quot;Vendedor Anônimo&quot; }&#10;&#10;        // Por enquanto usar imagem padrão&#10;        imgProductDetail.setImageResource(R.drawable.ic_launcher_background)&#10;&#10;        // Atualizar botões baseado no estoque&#10;        updateQuantityControls()&#10;        updateAddToCartButton()&#10;    }&#10;&#10;    private fun setupQuantityControls() {&#10;        btnDecrease.setOnClickListener {&#10;            if (currentQuantity &gt; 1) {&#10;                currentQuantity--&#10;                updateQuantityDisplay()&#10;                updateQuantityControls()&#10;            }&#10;        }&#10;&#10;        btnIncrease.setOnClickListener {&#10;            if (currentQuantity &lt; product.stock) {&#10;                currentQuantity++&#10;                updateQuantityDisplay()&#10;                updateQuantityControls()&#10;            }&#10;        }&#10;&#10;        updateQuantityDisplay()&#10;    }&#10;&#10;    private fun updateQuantityDisplay() {&#10;        txtQuantity.text = currentQuantity.toString()&#10;    }&#10;&#10;    private fun updateQuantityControls() {&#10;        btnDecrease.isEnabled = currentQuantity &gt; 1&#10;        btnIncrease.isEnabled = currentQuantity &lt; product.stock&#10;&#10;        // Visual feedback&#10;        btnDecrease.alpha = if (currentQuantity &gt; 1) 1.0f else 0.5f&#10;        btnIncrease.alpha = if (currentQuantity &lt; product.stock) 1.0f else 0.5f&#10;    }&#10;&#10;    private fun updateAddToCartButton() {&#10;        btnAddToCart.isEnabled = product.stock &gt; 0&#10;        if (product.stock &gt; 0) {&#10;            btnAddToCart.text = &quot; Adicionar ao Carrinho&quot;&#10;            btnAddToCart.alpha = 1.0f&#10;        } else {&#10;            btnAddToCart.text = &quot;❌ Produto Esgotado&quot;&#10;            btnAddToCart.alpha = 0.6f&#10;        }&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        btnAddToCart.setOnClickListener {&#10;            if (product.stock &gt;= currentQuantity) {&#10;                addToCart()&#10;            } else {&#10;                Toast.makeText(this, &quot;Estoque insuficiente!&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun addToCart() {&#10;        val success = CartManager.addToCart(product, currentQuantity)&#10;        &#10;        if (success) {&#10;            val totalItems = CartManager.getTotalItemCount()&#10;            Toast.makeText(&#10;                this,&#10;                &quot;✅ Adicionado ao carrinho!\n${product.name}\nQuantidade: $currentQuantity&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;&#10;            // Forçar atualização do badge&#10;            CartBadgeManager.updateBadge(totalItems)&#10;        } else {&#10;            Toast.makeText(&#10;                this,&#10;                &quot;❌ Erro: Estoque insuficiente!\nDisponível: ${product.stock} unidades&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;        }&#10;    }&#10;&#10;    private fun setupBottomNavigation() {&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottom_navigation_product)&#10;&#10;        // Configurar badge do carrinho&#10;        CartBadgeManager.setupCartBadge(bottomNavigation)&#10;        CartBadgeManager.updateBadge(CartManager.getTotalItemCount())&#10;&#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    intent.putExtra(&quot;openMenu&quot;, true)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    val intent = Intent(this, CartActivity::class.java)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/modelos/ProductAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/modelos/ProductAdapter.kt" />
              <option name="originalContent" value="package com.unasp.unaspmarketplace.modelos&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.unasp.unaspmarketplace.R&#10;import com.unasp.unaspmarketplace.models.Product&#10;&#10;class ProductAdapter(private var products: MutableList&lt;Product&gt;) :&#10;    RecyclerView.Adapter&lt;ProductAdapter.ProdutoViewHolder&gt;() {&#10;&#10;    class ProdutoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val img = itemView.findViewById&lt;ImageView&gt;(R.id.imgProduct)&#10;        val name = itemView.findViewById&lt;TextView&gt;(R.id.txtProductName)&#10;        val price = itemView.findViewById&lt;TextView&gt;(R.id.txtProductPrice)&#10;        val category = itemView.findViewById&lt;TextView&gt;(R.id.txtProductCategory)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ProdutoViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_product, parent, false)&#10;        return ProdutoViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ProdutoViewHolder, position: Int) {&#10;        val product = products[position]&#10;&#10;        // Por enquanto usar imagem padrão até implementarmos upload de imagens&#10;        holder.img.setImageResource(R.drawable.ic_launcher_background)&#10;        holder.name.text = product.name&#10;        holder.price.text = &quot;R$ %.2f&quot;.format(product.price)&#10;&#10;        // Mostrar categoria se houver TextView para isso&#10;        holder.category?.text = product.category&#10;    }&#10;&#10;    override fun getItemCount() = products.size&#10;&#10;    // Método para atualizar a lista de produtos&#10;    fun updateProducts(newProducts: List&lt;Product&gt;) {&#10;        products.clear()&#10;        products.addAll(newProducts)&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    // Método para adicionar um produto&#10;    fun addProduct(product: Product) {&#10;        products.add(0, product) // Adicionar no início da lista&#10;        notifyItemInserted(0)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace.modelos&#10;&#10;import android.content.Intent&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.unasp.unaspmarketplace.ProductDetailActivity&#10;import com.unasp.unaspmarketplace.R&#10;import com.unasp.unaspmarketplace.models.Product&#10;&#10;class ProductAdapter(private var products: MutableList&lt;Product&gt;) :&#10;    RecyclerView.Adapter&lt;ProductAdapter.ProdutoViewHolder&gt;() {&#10;&#10;    class ProdutoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val img = itemView.findViewById&lt;ImageView&gt;(R.id.imgProduct)&#10;        val name = itemView.findViewById&lt;TextView&gt;(R.id.txtProductName)&#10;        val price = itemView.findViewById&lt;TextView&gt;(R.id.txtProductPrice)&#10;        val category = itemView.findViewById&lt;TextView&gt;(R.id.txtProductCategory)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ProdutoViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_product, parent, false)&#10;        return ProdutoViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ProdutoViewHolder, position: Int) {&#10;        val product = products[position]&#10;        &#10;        // Por enquanto usar imagem padrão até implementarmos upload de imagens&#10;        holder.img.setImageResource(R.drawable.ic_launcher_background)&#10;        holder.name.text = product.name&#10;        holder.price.text = &quot;R$ %.2f&quot;.format(product.price)&#10;        &#10;        // Mostrar categoria se houver TextView para isso&#10;        holder.category?.text = product.category&#10;&#10;        // Adicionar clique no item para abrir detalhes do produto&#10;        holder.itemView.setOnClickListener {&#10;            val context = holder.itemView.context&#10;            val intent = Intent(context, ProductDetailActivity::class.java).apply {&#10;                putExtra(&quot;productId&quot;, product.id)&#10;                putExtra(&quot;productName&quot;, product.name)&#10;                putExtra(&quot;productDescription&quot;, product.description)&#10;                putExtra(&quot;productPrice&quot;, product.price)&#10;                putExtra(&quot;productStock&quot;, product.stock)&#10;                putExtra(&quot;productCategory&quot;, product.category)&#10;                putExtra(&quot;productSellerId&quot;, product.sellerId)&#10;                putExtra(&quot;productSellerName&quot;, product.sellerName)&#10;                putExtra(&quot;productActive&quot;, product.active)&#10;            }&#10;            context.startActivity(intent)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = products.size&#10;&#10;    // Método para atualizar a lista de produtos&#10;    fun updateProducts(newProducts: List&lt;Product&gt;) {&#10;        products.clear()&#10;        products.addAll(newProducts)&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    // Método para adicionar um produto&#10;    fun addProduct(product: Product) {&#10;        products.add(0, product) // Adicionar no início da lista&#10;        notifyItemInserted(0)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/utils/CartBadgeManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/utils/CartBadgeManager.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace.utils&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.unasp.unaspmarketplace.R&#10;&#10;object CartBadgeManager {&#10;    private var currentBottomNav: BottomNavigationView? = null&#10;&#10;    fun setupCartBadge(bottomNavigationView: BottomNavigationView) {&#10;        currentBottomNav = bottomNavigationView&#10;    }&#10;&#10;    fun updateBadge(count: Int) {&#10;        currentBottomNav?.let { nav -&gt;&#10;            val badge = nav.getOrCreateBadge(R.id.nav_cart)&#10;            if (count &gt; 0) {&#10;                badge.isVisible = true&#10;                badge.number = count&#10;                badge.backgroundColor = android.graphics.Color.RED&#10;            } else {&#10;                badge.isVisible = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun hideBadge() {&#10;        currentBottomNav?.let { nav -&gt;&#10;            nav.removeBadge(R.id.nav_cart)&#10;        }&#10;    }&#10;&#10;    fun showBadge(count: Int) {&#10;        updateBadge(count)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/utils/CartManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/utils/CartManager.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace.utils&#10;&#10;import com.unasp.unaspmarketplace.models.Product&#10;&#10;data class CartItem(&#10;    val product: Product,&#10;    var quantity: Int = 1&#10;) {&#10;    val totalPrice: Double&#10;        get() = product.price * quantity&#10;}&#10;&#10;object CartManager {&#10;    private val cartItems = mutableListOf&lt;CartItem&gt;()&#10;    private val listeners = mutableListOf&lt;CartUpdateListener&gt;()&#10;&#10;    interface CartUpdateListener {&#10;        fun onCartUpdated(itemCount: Int, totalPrice: Double)&#10;    }&#10;&#10;    fun addListener(listener: CartUpdateListener) {&#10;        listeners.add(listener)&#10;    }&#10;&#10;    fun removeListener(listener: CartUpdateListener) {&#10;        listeners.remove(listener)&#10;    }&#10;&#10;    private fun notifyListeners() {&#10;        val itemCount = getTotalItemCount()&#10;        val totalPrice = getTotalPrice()&#10;        listeners.forEach { it.onCartUpdated(itemCount, totalPrice) }&#10;    }&#10;&#10;    fun addToCart(product: Product, quantity: Int = 1): Boolean {&#10;        // Verificar se produto já existe no carrinho&#10;        val existingItem = cartItems.find { it.product.id == product.id }&#10;        &#10;        if (existingItem != null) {&#10;            // Aumentar quantidade se já existe&#10;            val newQuantity = existingItem.quantity + quantity&#10;            if (newQuantity &lt;= product.stock) {&#10;                existingItem.quantity = newQuantity&#10;                notifyListeners()&#10;                return true&#10;            } else {&#10;                return false // Estoque insuficiente&#10;            }&#10;        } else {&#10;            // Adicionar novo item&#10;            if (quantity &lt;= product.stock) {&#10;                cartItems.add(CartItem(product, quantity))&#10;                notifyListeners()&#10;                return true&#10;            } else {&#10;                return false // Estoque insuficiente&#10;            }&#10;        }&#10;    }&#10;&#10;    fun removeFromCart(productId: String) {&#10;        cartItems.removeAll { it.product.id == productId }&#10;        notifyListeners()&#10;    }&#10;&#10;    fun updateQuantity(productId: String, newQuantity: Int): Boolean {&#10;        val item = cartItems.find { it.product.id == productId }&#10;        return if (item != null &amp;&amp; newQuantity &lt;= item.product.stock &amp;&amp; newQuantity &gt; 0) {&#10;            item.quantity = newQuantity&#10;            notifyListeners()&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    fun clearCart() {&#10;        cartItems.clear()&#10;        notifyListeners()&#10;    }&#10;&#10;    fun getCartItems(): List&lt;CartItem&gt; = cartItems.toList()&#10;&#10;    fun getTotalItemCount(): Int = cartItems.sumOf { it.quantity }&#10;&#10;    fun getTotalPrice(): Double = cartItems.sumOf { it.totalPrice }&#10;&#10;    fun isInCart(productId: String): Boolean = cartItems.any { it.product.id == productId }&#10;&#10;    fun getItemQuantity(productId: String): Int =&#10;        cartItems.find { it.product.id == productId }?.quantity ?: 0&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/cart_badge_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/cart_badge_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@android:color/holo_red_dark&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@android:color/white&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_shopping_cart.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_shopping_cart.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M7,18c-1.1,0 -2,0.9 -2,2s0.9,2 2,2 2,-0.9 2,-2 -0.9,-2 -2,-2zM1,2v2h2l3.6,7.59 -1.35,2.45c-0.16,0.28 -0.25,0.61 -0.25,0.96 0,1.1 0.9,2 2,2h12v-2L7.42,15c-0.14,0 -0.25,-0.11 -0.25,-0.25l0.03,-0.12L8.1,13h7.45c0.75,0 1.41,-0.41 1.75,-1.03L21.7,4H5.21l-0.94,-2L1,2zM17,18c-1.1,0 -2,0.9 -2,2s0.9,2 2,2 2,-0.9 2,-2 -0.9,-2 -2,-2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_product_detail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_product_detail.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;!-- Header --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/header_product&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@color/white&quot;&#10;        android:elevation=&quot;4dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/btnBack&quot;&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot;&#10;            android:src=&quot;@android:drawable/ic_media_previous&quot;&#10;            android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;            android:padding=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Detalhes do Produto&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;@color/blue_default&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginStart=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;View&#10;            android:layout_width=&quot;32dp&quot;&#10;            android:layout_height=&quot;32dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Conteúdo Principal --&gt;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/header_product&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/bottom_section&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Imagem do Produto --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;300dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/imgProductDetail&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:scaleType=&quot;centerCrop&quot;&#10;                    android:background=&quot;@color/gray_500&quot;&#10;                    android:alpha=&quot;0.1&quot;&#10;                    android:src=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Nome do Produto --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtProductName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Nome do Produto&quot;&#10;                android:textSize=&quot;24sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Categoria --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtProductCategory&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Categoria&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@color/blue_default&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;!-- Preço --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtProductPrice&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;R$ 0,00&quot;&#10;                android:textSize=&quot;28sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/blue_default&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;!-- Estoque --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot; Estoque: &quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;@color/black&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/txtProductStock&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0 unidades&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;@color/blue_default&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Descrição --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot; Descrição&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtProductDescription&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Descrição do produto&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:lineSpacingExtra=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;!-- Vendedor --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot; Vendedor&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtSellerName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Nome do Vendedor&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/blue_default&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- Seção Inferior - Quantidade e Botão --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/bottom_section&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:background=&quot;@color/white&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/bottom_navigation_product&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;!-- Controle de Quantidade --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Quantidade:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot; /&gt;&#10;&#10;            &lt;View&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:layout_weight=&quot;1&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnDecrease&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;-&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;24dp&quot;&#10;                android:backgroundTint=&quot;@color/gray_500&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/txtQuantity&quot;&#10;                android:layout_width=&quot;60dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;1&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginStart=&quot;12dp&quot;&#10;                android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnIncrease&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;+&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;24dp&quot;&#10;                android:backgroundTint=&quot;@color/blue_default&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Botão Adicionar ao Carrinho --&gt;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btnAddToCart&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:text=&quot; Adicionar ao Carrinho&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:backgroundTint=&quot;@color/blue_default&quot;&#10;            app:cornerRadius=&quot;12dp&quot;&#10;            android:elevation=&quot;4dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- HOTBAR - BARRA DE NAVEGAÇÃO INFERIOR --&gt;&#10;    &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;        android:id=&quot;@+id/bottom_navigation_product&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/white&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        android:paddingTop=&quot;8dp&quot;&#10;        android:paddingBottom=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:itemIconTint=&quot;@color/bottom_navigation_colors&quot;&#10;        app:itemTextColor=&quot;@color/bottom_navigation_colors&quot;&#10;        app:itemIconSize=&quot;24dp&quot;&#10;        app:itemTextAppearanceActive=&quot;@style/TextAppearance.AppCompat.Caption&quot;&#10;        app:itemTextAppearanceInactive=&quot;@style/TextAppearance.AppCompat.Caption&quot;&#10;        app:labelVisibilityMode=&quot;labeled&quot;&#10;        app:itemPaddingTop=&quot;4dp&quot;&#10;        app:itemPaddingBottom=&quot;4dp&quot;&#10;        app:menu=&quot;@menu/bottom_navigation_menu&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/cart_icon_with_badge.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/cart_icon_with_badge.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;!-- Ícone do carrinho --&gt;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/cart_icon&quot;&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:src=&quot;@drawable/ic_shopping_cart&quot;&#10;        android:layout_gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;!-- Badge/bolinha com contador --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/cart_badge&quot;&#10;        android:layout_width=&quot;20dp&quot;&#10;        android:layout_height=&quot;20dp&quot;&#10;        android:layout_gravity=&quot;top|end&quot;&#10;        android:layout_marginTop=&quot;-6dp&quot;&#10;        android:layout_marginEnd=&quot;-6dp&quot;&#10;        android:background=&quot;@drawable/cart_badge_background&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:text=&quot;0&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;10sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:visibility=&quot;gone&quot; /&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_product.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_product.xml" />
              <option name="originalContent" value="&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;160dp&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgProduct&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:background=&quot;@color/gray_500&quot;&#10;            android:alpha=&quot;0.1&quot;&#10;            app:cornerRadius=&quot;6dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtProductName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Produto&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:maxLines=&quot;2&quot;&#10;            android:ellipsize=&quot;end&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtProductCategory&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Categoria&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textColor=&quot;@color/blue_default&quot;&#10;            android:layout_marginTop=&quot;2dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtProductPrice&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;R$ 0,00&quot;&#10;            android:textColor=&quot;@color/blue_default&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;160dp&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgProduct&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:background=&quot;@color/gray_500&quot;&#10;            android:alpha=&quot;0.1&quot;&#10;            app:cornerRadius=&quot;6dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtProductName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Produto&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:maxLines=&quot;2&quot;&#10;            android:ellipsize=&quot;end&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtProductCategory&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Categoria&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textColor=&quot;@color/blue_default&quot;&#10;            android:layout_marginTop=&quot;2dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/txtProductPrice&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;R$ 0,00&quot;&#10;            android:textColor=&quot;@color/blue_default&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;!-- Indicador de clique --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot; Toque para ver detalhes&quot;&#10;            android:textSize=&quot;10sp&quot;&#10;            android:textColor=&quot;@color/gray_500&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:alpha=&quot;0.7&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>