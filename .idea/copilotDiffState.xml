<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/CartActivityNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/CartActivityNew.kt" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.widget.ImageView&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import com.unasp.unaspmarketplace.utils.CartManager&#10;import com.unasp.unaspmarketplace.utils.CartBadgeManager&#10;&#10;class CartActivity : AppCompatActivity(), CartManager.CartUpdateListener {&#10;&#10;    private lateinit var recyclerCart: RecyclerView&#10;    private lateinit var txtTotal: TextView&#10;    private lateinit var btnCheckout: Button&#10;    private lateinit var cartAdapter: CartAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.cart_activity)&#10;&#10;        initViews()&#10;        setupRecyclerView()&#10;        setupButtons()&#10;        setupBottomNavigation()&#10;        loadCartItems()&#10;        &#10;        // Registrar listener do carrinho&#10;        CartManager.addListener(this)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        CartManager.removeListener(this)&#10;    }&#10;&#10;    override fun onCartUpdated(itemCount: Int, totalPrice: Double) {&#10;        updateUI()&#10;        CartBadgeManager.updateBadge(itemCount)&#10;    }&#10;&#10;    private fun initViews() {&#10;        txtTotal = findViewById(R.id.txtTotal)&#10;        btnCheckout = findViewById(R.id.btnCheckout)&#10;        recyclerCart = findViewById(R.id.recyclerCart)&#10;&#10;        val btnBack = findViewById&lt;ImageView&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener { finish() }&#10;&#10;        val btnClearCart = findViewById&lt;ImageView&gt;(R.id.btnClearCart)&#10;        btnClearCart.setOnClickListener {&#10;            CartManager.clearCart()&#10;            Toast.makeText(this, &quot;Carrinho limpo!&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        cartAdapter = CartAdapter()&#10;        recyclerCart.layoutManager = LinearLayoutManager(this)&#10;        recyclerCart.adapter = cartAdapter&#10;    }&#10;&#10;    private fun setupButtons() {&#10;        btnCheckout.setOnClickListener {&#10;            val cartItems = CartManager.getCartItems()&#10;            if (cartItems.isEmpty()) {&#10;                Toast.makeText(this, &quot;Carrinho vazio!&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                val total = CartManager.getTotalPrice()&#10;                Toast.makeText(this, &quot;Compra finalizada!\nTotal: R$ %.2f&quot;.format(total), Toast.LENGTH_LONG).show()&#10;                CartManager.clearCart()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCartItems() {&#10;        updateUI()&#10;    }&#10;&#10;    private fun updateUI() {&#10;        val cartItems = CartManager.getCartItems()&#10;        cartAdapter.updateItems(cartItems)&#10;        &#10;        val total = CartManager.getTotalPrice()&#10;        txtTotal.text = &quot;Total: R$ %.2f&quot;.format(total)&#10;        &#10;        btnCheckout.isEnabled = cartItems.isNotEmpty()&#10;        btnCheckout.alpha = if (cartItems.isNotEmpty()) 1.0f else 0.5f&#10;&#10;        // Mostrar mensagem se carrinho vazio&#10;        if (cartItems.isEmpty()) {&#10;            Toast.makeText(this, &quot;Carrinho vazio&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupBottomNavigation() {&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottom_navigation_cart)&#10;        bottomNavigation.selectedItemId = R.id.nav_cart&#10;        &#10;        CartBadgeManager.setupCartBadge(bottomNavigation)&#10;        CartBadgeManager.updateBadge(CartManager.getTotalItemCount())&#10;        &#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    intent.putExtra(&quot;openMenu&quot;, true)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    val intent = Intent(this, HomeActivity::class.java)&#10;                    startActivity(intent)&#10;                    finish()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    Toast.makeText(this, &quot;Você já está no Carrinho&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    inner class CartAdapter : RecyclerView.Adapter&lt;CartAdapter.CartViewHolder&gt;() {&#10;        private var items = listOf&lt;com.unasp.unaspmarketplace.utils.CartItem&gt;()&#10;&#10;        fun updateItems(newItems: List&lt;com.unasp.unaspmarketplace.utils.CartItem&gt;) {&#10;            items = newItems&#10;            notifyDataSetChanged()&#10;        }&#10;&#10;        inner class CartViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;            val txtName: TextView = itemView.findViewById(R.id.txtName)&#10;            val txtPrice: TextView = itemView.findViewById(R.id.txtPrice)&#10;            val txtQuantity: TextView = itemView.findViewById(R.id.txtQuantity)&#10;            val btnIncrease: Button = itemView.findViewById(R.id.btnIncrease)&#10;            val btnDecrease: Button = itemView.findViewById(R.id.btnDecrease)&#10;            val btnRemove: Button = itemView.findViewById(R.id.btnRemove)&#10;            val imgProduct: ImageView = itemView.findViewById(R.id.imgProduct)&#10;        }&#10;&#10;        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CartViewHolder {&#10;            val view = LayoutInflater.from(parent.context)&#10;                .inflate(R.layout.cart_item, parent, false)&#10;            return CartViewHolder(view)&#10;        }&#10;&#10;        override fun onBindViewHolder(holder: CartViewHolder, position: Int) {&#10;            val item = items[position]&#10;            val product = item.product&#10;            &#10;            holder.txtName.text = product.name&#10;            holder.txtPrice.text = &quot;R$ %.2f&quot;.format(item.totalPrice)&#10;            holder.txtQuantity.text = item.quantity.toString()&#10;            holder.imgProduct.setImageResource(R.drawable.ic_launcher_background)&#10;&#10;            // Botão incrementar (+)&#10;            holder.btnIncrease.isEnabled = item.quantity &lt; product.stock&#10;            holder.btnIncrease.setOnClickListener {&#10;                if (CartManager.updateQuantity(product.id, item.quantity + 1)) {&#10;                    // Atualização bem-sucedida&#10;                } else {&#10;                    Toast.makeText(itemView.context, &quot;Estoque insuficiente!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            // Botão decrementar (-)&#10;            holder.btnDecrease.isEnabled = item.quantity &gt; 1&#10;            holder.btnDecrease.setOnClickListener {&#10;                if (item.quantity &gt; 1) {&#10;                    CartManager.updateQuantity(product.id, item.quantity - 1)&#10;                }&#10;            }&#10;&#10;            // Botão remover&#10;            holder.btnRemove.setOnClickListener {&#10;                CartManager.removeFromCart(product.id)&#10;                Toast.makeText(itemView.context, &quot;Item removido do carrinho&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;&#10;        override fun getItemCount(): Int = items.size&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/HomeActivityNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/unasp/unaspmarketplace/HomeActivityNew.kt" />
              <option name="updatedContent" value="package com.unasp.unaspmarketplace&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.unasp.unaspmarketplace.modelos.Category&#10;import com.unasp.unaspmarketplace.modelos.CategoryAdapter&#10;import com.unasp.unaspmarketplace.modelos.ProductAdapter&#10;import android.content.Intent&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import android.widget.Toast&#10;import androidx.lifecycle.lifecycleScope&#10;import com.google.android.material.navigation.NavigationView&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;import androidx.core.view.GravityCompat&#10;import com.unasp.unaspmarketplace.models.Product&#10;import com.unasp.unaspmarketplace.repository.ProductRepository&#10;import kotlinx.coroutines.launch&#10;&#10;class HomeActivity : AppCompatActivity() {&#10;    private lateinit var productRepository: ProductRepository&#10;    private lateinit var productAdapter: ProductAdapter&#10;    private lateinit var recyclerProducts: RecyclerView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.home_activity)&#10;&#10;        // Inicializar repositório&#10;        productRepository = ProductRepository()&#10;&#10;        setupCategories()&#10;        setupProducts()&#10;        setupNavigation()&#10;&#10;        // Carregar produtos&#10;        loadProducts()&#10;    }&#10;&#10;    private fun setupCategories() {&#10;        val categorys = listOf(&#10;            Category(&quot;Roupas&quot;, R.drawable.tshirt_logo),&#10;            Category(&quot;Eletrônicos&quot;, R.drawable.computer_logo),&#10;            Category(&quot;Alimentos&quot;, R.drawable.apple_logo),&#10;            Category(&quot;Livros&quot;, R.drawable.book_logo)&#10;        )&#10;&#10;        val recyclerCategory = findViewById&lt;RecyclerView&gt;(R.id.recyclerCategorys)&#10;        recyclerCategory.layoutManager =&#10;            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        recyclerCategory.adapter = CategoryAdapter(categorys)&#10;    }&#10;&#10;    private fun setupProducts() {&#10;        recyclerProducts = findViewById(R.id.recyclerProducts)&#10;        recyclerProducts.layoutManager = GridLayoutManager(this, 2)&#10;        &#10;        // Inicializar adapter com lista vazia&#10;        productAdapter = ProductAdapter(mutableListOf())&#10;        recyclerProducts.adapter = productAdapter&#10;    }&#10;&#10;    private fun setupNavigation() {&#10;        // Configuração do menu lateral&#10;        val drawerLayout = findViewById&lt;DrawerLayout&gt;(R.id.drawerLayout)&#10;        val navigationView = findViewById&lt;NavigationView&gt;(R.id.navigationView)&#10;&#10;        // Verificar se deve abrir o menu automaticamente&#10;        if (intent.getBooleanExtra(&quot;openMenu&quot;, false)) {&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // Configuração da hotbar inferior&#10;        val bottomNavigation = findViewById&lt;BottomNavigationView&gt;(R.id.bottomNavigation)&#10;        bottomNavigation.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_menu -&gt; {&#10;                    // Abre o menu lateral&#10;                    drawerLayout.openDrawer(GravityCompat.START)&#10;                    true&#10;                }&#10;                R.id.nav_home -&gt; {&#10;                    // Já estamos na home, não precisa fazer nada&#10;                    Toast.makeText(this, &quot;Você já está na Home&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    // Implementar navegação para notificações&#10;                    Toast.makeText(this, &quot;Notificações em breve&quot;, Toast.LENGTH_SHORT).show()&#10;                    true&#10;                }&#10;                R.id.nav_cart -&gt; {&#10;                    // Navegar para o carrinho&#10;                    val intent = Intent(this, CartActivity::class.java)&#10;                    startActivity(intent)&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;&#10;        // Configuração do menu lateral&#10;        navigationView.setNavigationItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_post_item -&gt; {&#10;                    val intent = Intent(this, PostItemActivity::class.java)&#10;                    startActivity(intent)&#10;                }&#10;                R.id.nav_profile -&gt; {&#10;                    Toast.makeText(this, &quot;Perfil&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.closeDrawers() // fecha o menu depois do clique&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun loadProducts() {&#10;        lifecycleScope.launch {&#10;            try {&#10;                val result = productRepository.getActiveProducts()&#10;                &#10;                if (result.isSuccess) {&#10;                    val products = result.getOrNull() ?: emptyList()&#10;                    runOnUiThread {&#10;                        productAdapter.updateProducts(products)&#10;                        &#10;                        if (products.isEmpty()) {&#10;                            Toast.makeText(this@HomeActivity, &quot;Nenhum produto encontrado. Que tal publicar o primeiro?&quot;, Toast.LENGTH_LONG).show()&#10;                        }&#10;                    }&#10;                } else {&#10;                    val error = result.exceptionOrNull()?.message ?: &quot;Erro desconhecido&quot;&#10;                    runOnUiThread {&#10;                        Toast.makeText(this@HomeActivity, &quot;Erro ao carregar produtos: $error&quot;, Toast.LENGTH_LONG).show()&#10;                        &#10;                        // Carregar produtos de exemplo se houver erro&#10;                        loadSampleProducts()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                runOnUiThread {&#10;                    Toast.makeText(this@HomeActivity, &quot;Erro de conexão: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                    loadSampleProducts()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadSampleProducts() {&#10;        // Produtos de exemplo caso não consiga carregar do Firebase&#10;        val sampleProducts = listOf(&#10;            Product(&#10;                name = &quot;Notebook Dell&quot;,&#10;                description = &quot;Notebook Dell Inspiron&quot;,&#10;                price = 3500.0,&#10;                category = &quot;Eletrônicos&quot;,&#10;                stock = 5,&#10;                isActive = true&#10;            ),&#10;            Product(&#10;                name = &quot;Camiseta Azul&quot;,&#10;                description = &quot;Camiseta Nike azul&quot;,&#10;                price = 79.9,&#10;                category = &quot;Roupas&quot;,&#10;                stock = 10,&#10;                isActive = true&#10;            ),&#10;            Product(&#10;                name = &quot;Livro Kotlin&quot;,&#10;                description = &quot;Livro sobre programação Kotlin&quot;,&#10;                price = 120.0,&#10;                category = &quot;Livros&quot;,&#10;                stock = 3,&#10;                isActive = true&#10;            )&#10;        )&#10;        &#10;        productAdapter.updateProducts(sampleProducts)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Recarregar produtos quando voltar para a tela&#10;        loadProducts()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>